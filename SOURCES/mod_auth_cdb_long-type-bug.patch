--- contrib/mod_auth_cdb_copy.c	2021-11-04 09:43:07.914000000 +0000
+++ contrib/mod_auth_cdb.c	2021-11-04 09:57:42.013369553 +0000
@@ -41,6 +41,7 @@
 
 #include <sys/mman.h>
 #include <sys/types.h>
+#include <inttypes.h>
 
 #if defined(HAVE_CRYPT_H) && !defined(AIX4) && !defined(AIX5)
 # include <crypt.h>
@@ -58,14 +59,14 @@
   char *map;
   int fd;
   time_t mtime;
-  unsigned long size;
-  unsigned long loop;
-  unsigned long khash;
-  unsigned long kpos;
-  unsigned long hpos;
-  unsigned long hslots;
-  unsigned long dpos;
-  unsigned long dlen;
+  uint32_t size;
+  uint32_t loop;
+  uint32_t khash;
+  uint32_t kpos;
+  uint32_t hpos;
+  uint32_t hslots;
+  uint32_t dpos;
+  uint32_t dlen;
 };
 
 #define cdb_datapos(c) ((c)->dpos)
@@ -83,10 +84,10 @@
   register char *);
 static unsigned cdb_free(struct cdb *);
 static int cdb_has_key(struct cdb *, char *, unsigned int);
-static unsigned long cdb_hash(char *, unsigned int);
+static uint32_t cdb_hash(char *, unsigned int);
 static unsigned cdb_init(struct cdb *, int, pr_cdb_type_t);
-static int cdb_match_key(struct cdb *, char *, unsigned int, unsigned long);
-static int cdb_read(struct cdb *, char *, unsigned int, unsigned long);
+static int cdb_match_key(struct cdb *, char *, unsigned int, uint32_t);
+static int cdb_read(struct cdb *, char *, unsigned int, uint32_t);
 static void cdb_rewind(struct cdb *);
 
 /* module variables */
@@ -151,7 +152,7 @@
 
     if (!len)
       return 0;
- 
+
     if (*s != *t)
       break;
     ++s; ++t; --len;
@@ -175,8 +176,8 @@
        - ((int)(unsigned int)(unsigned char) *t);
 }
 
-static void cdb_unpack_data(char str[4], unsigned long *val) {
-  unsigned long res;
+static void cdb_unpack_data(char str[4], uint32_t *val) {
+  uint32_t res;
 
   res = (unsigned char) str[3];
   res <<= 8;
@@ -189,8 +190,8 @@
   *val = res;
 }
 
-static unsigned long cdb_hash(char *buf, unsigned int buflen) {
-  unsigned long hash = CDB_HASHSTART;
+static uint32_t cdb_hash(char *buf, unsigned int buflen) {
+  uint32_t hash = CDB_HASHSTART;
 
   while (buflen) {
     hash += (hash << 5);
@@ -202,7 +203,7 @@
 }
 
 static int cdb_match_key(struct cdb *cdb, char *key, unsigned int len,
-    unsigned long pos) {
+    uint32_t pos) {
   char buf[32] = {'\0'};
   unsigned int buflen;
 
@@ -280,7 +281,7 @@
 }
 
 static int cdb_read(struct cdb *cdb, char *buf, unsigned int buflen,
-    unsigned long pos) {
+    uint32_t pos) {
 
   if (cdb->map) {
     if ((pos > cdb->size) || (cdb->size - pos < buflen)) {
@@ -322,8 +323,8 @@
 
 static int cdb_has_key(struct cdb *cdb, char *key, unsigned int len) {
   char buf[8];
-  unsigned long pos;
-  unsigned long h;
+  uint32_t pos;
+  uint32_t h;
 
   cdb_rewind(cdb);
 
@@ -442,7 +443,7 @@
   if (!cdb_init(&group_cdb, cdb_fd, PR_CDB_GROUP)) {
     pr_log_pri(PR_LOG_WARNING, MOD_AUTH_CDB_VERSION
       ": unable to initialize cdb struct: %s", strerror(errno));
-    return FALSE; 
+    return FALSE;
   }
 
   return TRUE;
@@ -552,7 +553,7 @@
 
     } else {
       pr_log_pri(PR_LOG_NOTICE, MOD_AUTH_CDB_VERSION
-        ": no such GID '%lu' in '%s'", (unsigned long) gid, authcdbgroupfile);
+        ": no such GID '%" PRIu32 "' in '%s'", (uint32_t) gid, authcdbgroupfile);
     }
 
     return NULL;
@@ -612,7 +613,7 @@
   passwd_cache.pw_dir = passwd_tokens[5];
   passwd_cache.pw_shell = passwd_tokens[6];
 
-  return 0; 
+  return 0;
 }
 
 static struct passwd *cdb_get_passwd(char *key) {
@@ -638,7 +639,7 @@
 
     } else {
       pr_log_pri(PR_LOG_NOTICE, MOD_AUTH_CDB_VERSION
-        ": no such UID '%lu' in '%s'", (unsigned long) uid, authcdbuserfile);
+        ": no such UID '%" PRIu32 "' in '%s'", (uint32_t) uid, authcdbuserfile);
     }
 
     return NULL;
@@ -827,7 +828,7 @@
     return mod_create_data(cmd, (void *) passwd_cache.pw_name);
 
   /* convert the given numeric into a string */
-  snprintf(buf, sizeof(buf), "%lu", (unsigned long) cmd->argv[0]);
+  snprintf(buf, sizeof(buf), "%" PRIu32 "", (uint32_t) cmd->argv[0]);
   if (cdb_get_passwd(buf) != NULL)
     return mod_create_data(cmd, (void *) passwd_cache.pw_name);
 
@@ -846,7 +847,7 @@
     return mod_create_data(cmd, (void *) group_cache.gr_name);
 
   /* convert the given numeric into a string */
-  snprintf(buf, sizeof(buf), "%lu", (unsigned long) cmd->argv[0]);
+  snprintf(buf, sizeof(buf), "%" PRIu32 "", (uint32_t) cmd->argv[0]);
   if (cdb_get_group(buf) != NULL)
     return mod_create_data(cmd, (void *) group_cache.gr_name);
 
@@ -893,7 +894,7 @@
 
   if (!cdb_open_group())
     return PR_DECLINED(cmd);
-  
+
   /* if the requested group's information is already in the group cache,
    * return that.  Only if the requested group is different should a lookup
    * be done.
@@ -901,9 +902,9 @@
   if (group_cache.gr_gid != (gid_t) -1 &&
       group_cache.gr_gid == (gid_t) cmd->argv[0])
     return mod_create_data(cmd, (void *) &group_cache);
-  
+
   /* convert the given numeric into a string */
-  snprintf(buf, sizeof(buf), "%lu", (unsigned long) cmd->argv[0]);
+  snprintf(buf, sizeof(buf), "%" PRIu32 "", (uint32_t) cmd->argv[0]);
   if (cdb_get_group(buf) != NULL)
     return mod_create_data(cmd, (void *) &group_cache);
 
@@ -961,7 +962,7 @@
 
   if (!cdb_open_passwd())
     return PR_DECLINED(cmd);
-  
+
   /* if the requested user's information is already in the passwd cache,
    * return that.  Only if the requested user is different should a lookup
    * be done.
@@ -969,12 +970,12 @@
   if (passwd_cache.pw_uid != (uid_t) -1 &&
       passwd_cache.pw_uid == (uid_t) cmd->argv[0])
     return mod_create_data(cmd, (void *) &passwd_cache);
- 
+
   /* convert the given numeric into a string */
-  snprintf(buf, sizeof(buf), "%lu", (unsigned long) cmd->argv[0]);
+  snprintf(buf, sizeof(buf), "%" PRIu32 "", (uint32_t) cmd->argv[0]);
   if (cdb_get_passwd(buf) != NULL)
     return mod_create_data(cmd, (void *) &passwd_cache);
- 
+
   return PR_DECLINED(cmd);
 }
 
